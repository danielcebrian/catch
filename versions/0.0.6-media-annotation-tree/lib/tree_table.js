// Generated by CoffeeScript 1.4.0
(function() {

  Number.prototype.toCurrency = function() {
    var value;
    if (isNaN(this) || !isFinite(this)) {
      return '-';
    }
    value = Math.abs(this).toFixed(2);
    value = value.replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1,');
    return (this < 0 ? '-$' : '$') + value;
  };

  Number.prototype.toPercent = function() {
    if (isNaN(this) || !isFinite(this)) {
      return '-';
    }
    return Math.abs(this * 100).toFixed(2) + "%";
  };

  App.TreeTableExample = Ember.Namespace.create();

  App.TreeTableExample.TreeDataAdapter = Ember.Mixin.create({
    data: null,
    bodyContent: Ember.computed(function() {
      var rows;
      rows = this.get('rows');
      if (!rows) {
        return Ember.A();
      }
      rows = rows.slice(1, rows.get('length'));
      return rows.filterProperty('isShowing');
    }).property('rows'),
    footerContent: Ember.computed(function() {
      var rows;
      rows = this.get('rows');
      if (!rows) {
        return Ember.A();
      }
      return rows.slice(0, 1);
    }).property('rows'),
    columns: Ember.computed(function() {
      var columns, data, names;
      data = this.get('data');
      if (!data) {
        return;
      }
      names = this.get('data.value_factors').getEach('display_name');
      columns = names.map(function(name, index) {
        return Ember.Table.ColumnDefinition.create({
          index: index,
          headerCellName: name,
          getCellContent: function(row) {
            var object;
            object = row.values[this.get('index')];
            if (object.type === 'money') {
              return object.value.toCurrency();
            }
            if (object.type === 'percent') {
              return object.value.toPercent();
            }
            return "-";
          }
        });
      });
      columns.unshiftObject(this.get('groupingColumn'));
      return columns;
    }).property('data.valueFactors.@each', 'groupingColumn'),
    groupingColumn: Ember.computed(function() {
      var groupingFactors, name;
      groupingFactors = this.get('data.grouping_factors');
      name = groupingFactors.getEach('display_name').join(' â–¸ ');
      return Ember.Table.ColumnDefinition.create({
        headerCellName: name,
        columnWidth: 400,
        isTreeColumn: true,
        headerCellViewClass: 'App.TreeTableExample.HeaderTreeCell',
        tableCellViewClass: 'App.TreeTableExample.TreeCell',
        getCellContent: function(row) {
          return row.group_value;
        }
      });
    }).property('data.grouping_factors.@each'),
    root: Ember.computed(function() {
      var data;
      data = this.get('data');
      if (!data) {
        return;
      }
      return this.createTree(null, data.root);
    }).property('data', 'sortAscending', 'sortColumn'),
    rows: Ember.computed(function() {
      var root;
      root = this.get('root');
      if (!root) {
        return Ember.A();
      }
      return this.flattenTree(null, root, Ember.A());
    }).property('root'),
    orderBy: function(item1, item2) {
      var result, sortAscending, sortColumn, value1, value2;
      sortColumn = this.get('sortColumn');
      sortAscending = this.get('sortAscending');
      if (!sortColumn) {
        return 1;
      }
      value1 = sortColumn.getCellContent(item1.get('content'));
      value2 = sortColumn.getCellContent(item2.get('content'));
      result = Ember.compare(value1, value2);
      if (sortAscending) {
        return result;
      } else {
        return -result;
      }
    },
    createTree: function(parent, node) {
      var children, row,
        _this = this;
      row = App.TreeTableExample.TreeTableRow.create({
        content: node
      });
      children = (node.children || []).map(function(child) {
        return _this.createTree(row, child);
      });
      children.sort(jQuery.proxy(this.orderBy, this));
      row.set('parent', parent);
      row.set('children', children);
      return row;
    },
    flattenTree: function(parent, node, rows) {
      var _this = this;
      rows.pushObject(node);
      (node.children || []).forEach(function(child) {
        return _this.flattenTree(node, child, rows);
      });
      return rows;
    }
  });

  App.TreeTableExample.TreeTableRow = Ember.Table.Row.extend({
    children: null,
    parent: null,
    isCollapsed: false,
    indentationSpacing: 20,
    isLeaf: Ember.computed(function() {
      return this.get('children.length') === 0;
    }).property('children'),
    isShowing: Ember.computed(function() {
      var parent;
      parent = this.get('parent');
      if (!parent) {
        return true;
      }
      return this.get('parent.isShowing') && !this.get('parent.isCollapsed');
    }).property('parent.isShowing', 'parent.isCollapsed'),
    indentation: Ember.computed(function() {
      var parent, spacing;
      parent = this.get('parent');
      spacing = this.get('indentationSpacing');
      if (!(parent && spacing)) {
        return 0;
      }
      return parent.get('indentation') + spacing;
    }).property('indentationSpacing', 'parent.indentation'),
    recursiveCollapse: function(isCollapsed) {
      this.set('isCollapsed', isCollapsed);
      return this.get('children').forEach(function(child) {
        return child.recursiveCollapse(isCollapsed);
      });
    }
  });

  App.TreeTableExample.TreeCell = Ember.Table.TableCell.extend({
    templateName: 'table-tree-cell',
    styleBindings: ['indentation:padding-left'],
    indentation: Ember.computed(function() {
      var indentation;
      indentation = this.get('row.indentation');
      if (indentation) {
        return indentation - 15;
      } else {
        return 0;
      }
    }).property('row.indentation')
  });

  App.TreeTableExample.HeaderTreeCell = Ember.Table.HeaderCell.extend({
    templateName: 'table-header-tree-cell'
  });

  App.TreeTableExample.TablesContainer = Ember.Table.TablesContainer.extend(Ember.Table.RowMultiSelectionMixin, {
    leftArrowPressed: function(event) {
      var sel;
      sel = this.get('selection');
      return sel.forEach(function(row) {
        return row.set('isCollapsed', true);
      });
    },
    rightArrowPressed: function(event) {
      var sel;
      sel = this.get('selection');
      return sel.forEach(function(row) {
        return row.set('isCollapsed', false);
      });
    }
  });

  App.TreeTableExample.TableController = Ember.Table.TableController.extend(App.TreeTableExample.TreeDataAdapter, {
    numFixedColumns: 1,
    isCollapsed: false,
    rowHeight: 30,
    hasHeader: true,
    hasFooter: true,
    sortAscending: false,
    sortColumn: null,
    selection: null,
    toggleTableCollapse: function(event) {
      var children, isCollapsed;
      this.toggleProperty('isCollapsed');
      isCollapsed = this.get('isCollapsed');
      children = this.get('root.children');
      if (!(children && children.get('length') > 0)) {
        return;
      }
      children.forEach(function(child) {
        return child.recursiveCollapse(isCollapsed);
      });
      return this.notifyPropertyChange('rows');
    },
    toggleCollapse: function(row) {
      row.toggleProperty('isCollapsed');
      return Ember.run.next(this, function() {
        return this.notifyPropertyChange('rows');
      });
    },
    sortByColumn: function(column) {
      column.toggleProperty('sortAscending');
      this.set('sortColumn', column);
      return this.set('sortAscending', column.get('sortAscending'));
    },
    onSelectionsDidChange: Ember.observer(function() {
      return console.log('selectionsDidChange');
    }, 'selection.@each')
  });

}).call(this);
